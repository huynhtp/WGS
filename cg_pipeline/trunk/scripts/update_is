#!/usr/bin/env perl

# update_is: update IS element database from www-is.biotoul.fr
# Author: Lee Katz (lskatz@gatech.edu)

package PipelineRunner;
my ($VERSION) = ('$Id: $' =~ /,v\s+(\d+\S+)/o);

my $settings = {
  appname => 'cgpipeline',
  url=>"http://www-is.biotoul.fr/is/IS_infos/Current_names.html",
};

use strict;
use FindBin;
use lib "$FindBin::RealBin/../lib";
$ENV{PATH} = "$FindBin::RealBin:".$ENV{PATH};
use AKUtils qw(logmsg);

use Getopt::Long;
use File::Temp ('tempdir');
use File::Path;
use File::Spec;
use File::Copy qw/copy/;
use File::Basename;
use List::Util qw(min max sum shuffle);
use CGPipelineUtils;
use Data::Dumper;
use LWP::Simple;
use HTML::TableExtract;

my $verbose;

$0 = fileparse($0);
local $SIG{'__DIE__'} = sub { my $e = $_[0]; $e =~ s/(at [^\s]+? line \d+\.$)/\nStopped $1/; die("$0: ".(caller(1))[3].": ".$e); };
sub logmsg {my $FH = $FSFind::LOG || *STDOUT; print $FH "$0: ".(caller(1))[3].": @_\n";}

exit(main());
sub main(){
  $settings = AKUtils::loadConfig($settings);
  
  # get options
  my @cmd_options = qw(help outfile=s);
  GetOptions($settings,@cmd_options) or die;
  die usage() if($$settings{help});
  my $outfile=$$settings{outfile} or die "Missing outfile parameter:\n".usage();
  $$settings{order_seqs_by_name}=1;
  $$settings{tempdir}||=AKUtils::mktempdir();
 
  my $isElementUrlList=isElementUrlList($settings);
  my ($isFna,$isFaa)=isElementFasta($isElementUrlList,$outfile,$settings);
  
  logmsg "Output files are $outfile.fna and $outfile.faa";

  return 0;
}

sub isElementFasta{
  my($isElementUrlList,$outfile,$settings)=@_;

  my $tmpFna="$$settings{tempdir}/is.fna";
  my $tmpFaa="$$settings{tempdir}/is.faa";
  open(NT,">",$tmpFna) or die "Could not write to $tmpFna: $!";
  open(AA,">",$tmpFaa) or die "Could not write to $tmpFaa: $!";
  logmsg "Downloading IS sequences; " .scalar(@$isElementUrlList)." IS to download";
  my $isCount=0;
  my $missingCount=0; # sequences that aren't found
  for my $url(@$isElementUrlList){
    my %is=(fna=>"NNN",faa=>"XXX",family=>"unknown",group=>"unknown");
    my $isPage=get($url);
    
    $is{name}=$url;
    $is{name}=~s/.+name=(.+)/$1/;

    # family, group
    if($isPage=~/<td>((?:IS|Tn).+?)<\/td>\s*<td>(IS.+?|\-|)<\/td>/){
      $is{family}=$1;
      $is{group}=$2;
      $is{name}="$is{family} name=$is{name} family=$is{family} group=$is{group}";
    }

    # nt and aa sequences
    if($isPage=~/IS_SEQ:\s*.+?<tt>(.+?)<\/tt>/){
      my $sequence=$1;
      $sequence=~s/<.*?br.*?>//g; # remove html
      print NT ">$is{name}\n$sequence\n";
    }
    my $aaCount=0;
    while($isPage=~/IS_PEP(\d+)?:\s*.+?<tt>(.+?)<[^b]/g){
      my $sequence=$2;
      $sequence=~s/<.*?br.*?>//g;
      print AA ">$is{name}\n$sequence\n";
      $aaCount++;
    }
    if(!$aaCount){
      logmsg "WARNING Could not find a sequence for $is{name} via\n  $url";
      $missingCount++;
    }

    $isCount++;
    if($isCount % 50 == 0){
      logmsg "$isCount IS elements downloaded";
      #logmsg "debugging...";last;
    }
  }
  close NT; close AA;
  logmsg "$isCount IS elements downloaded (done downloading).";
  logmsg "$missingCount sequences were not found and were skipped.";

  copy($tmpFna,"$outfile.fna");
  copy($tmpFaa,"$outfile.faa");

  # make the blast dbs and move them here
  my $formatdbOpts={formatdb_protein_db=>0,formatdb_in_place=>1};
  AKUtils::formatBLASTdb("$outfile.fna",$formatdbOpts);
  $$formatdbOpts{formatdb_protein_db}=1;
  AKUtils::formatBLASTdb("$outfile.faa",$formatdbOpts);

  return("$outfile.fna","$outfile.faa");
}

sub isElementUrlList{
  my($settings)=@_;
  my @URL; # URL list for where IS element pages are
  my $mainPage=get($$settings{url});
  logmsg "Downloading list of IS elements";
  my $table;
  if($mainPage=~/(<table.+<\/table>)/i){
    $table=$1;
  } else{
    die "Could not find an HTML table at $$settings{url}";
  }
  $table=~s/(\r?\n)|(\r\n?)/\n/g; # ugh windows server

  my $p=HTML::TableExtract->new(headers => ["IS names"]);
  $p->parse($table);
  my @name;
  foreach my $ts($p->tables){
    foreach my $row ($ts->rows){
      for (@$row){
        s/\(.*\)//g;              # remove things in parentheses
        my @tmp=split /\s+/;
        $_=~s/\s+//g for(@tmp);    # remove whitespace
        @tmp=grep(!/^\s*$/,@tmp);
        push(@name,@tmp);
      }
    }
  }

  # http://www-is.biotoul.fr/is/scripts/is_spec.php?name=ISPsp2
  #push(@URL,"http://www-is.biotoul.fr/is/scripts/is_spec.php?name=$_") for(@name);
  #push(@URL,"https://www-is.biotoul.fr//index.html?is_special_name=$_") for(@name);
  push(@URL,"https://www-is.biotoul.fr/is/scripts/is_spec.php?name=$_") for(@name);
  
  return \@URL;
}

sub usage{
  "Download the database of IS elements
  usage: $0
  -h this help menu
  -o outfile basename (.fna and .faa will be appended)
  "
}
