#!/usr/bin/env perl

# run-prediction: Perform standard prediction protocol operations on input FASTA file(s)
# Author: Andrey Kislyuk (kislyuk@gatech.edu)

# TODO: investigate integration of Genomix, Jigsaw, etc.

package PipelineRunner;
my ($VERSION) = ('$Id: $' =~ /,v\s+(\d+\S+)/o);

my $settings = {
	appname => 'cgpipeline',
};
my $stats;

use strict;
use FindBin;
use lib "$FindBin::RealBin/../lib";
$ENV{PATH} = "$FindBin::RealBin:".$ENV{PATH};
use AKUtils qw(logmsg);

use Getopt::Long;
use File::Temp ('tempdir');
use File::Path;
use File::Spec;
use File::Copy;
use File::Basename;
use List::Util qw(min max sum shuffle);
use Bio::Seq;
use Bio::SeqIO;
#use Bio::SeqFeature::Gene::GeneStructure;
use Bio::SeqFeature::Generic;
use Bio::Species;
use Bio::Annotation::SimpleValue;
use AKUtils;
use CGPipeline::TagFactory;
use Data::Dumper;

$0 = fileparse($0);
local $SIG{'__DIE__'} = sub { my $e = $_[0]; $e =~ s/(at [^\s]+? line \d+\.$)/\nStopped $1/; die("$0: ".(caller(1))[3].": ".$e); };
sub logmsg {my $FH = $PipelineRunner::LOG || *STDOUT; print $FH "$0: ".(caller(1))[3].": @_\n";}

exit(main());

sub main() {
	$settings = AKUtils::loadConfig($settings);

	my $usage = "$0 input.mfa [, input2.mfa, ...] -strain_name=name [-tag_prefix=prefix] [-classification=classification] [-R references.mfa] [-C workdir] [-blast_db=db] [-o=output_filename.gb]";

	die("Usage: $usage\n") if @ARGV < 1;

	my @cmd_options = ('tempdir=s','ChangeDir=s', 'Reference=s@', 'keep', 'blast_db=s', 'outfile=s', 'strain_name=s', 'tag_prefix=s', 'classification=s');
	GetOptions($settings, @cmd_options) or die;
	die("Argument strain_name is required. Usage: $usage\n") unless defined $$settings{strain_name};
	die("Argument classification is required. Usage: $usage\n") unless defined $$settings{classification};
	
	$$settings{outfile} ||= "$0.out.gb";
  $$settings{assembly_linker} ||= "NNNNNCACACACTTAATTAATTAAGTGTGTGNNNNN";
	$$settings{min_predictors_to_call_orf}=1; 
	$$settings{min_predictors_to_call_orf}++ if ($$settings{prediction_use_genemark});

	my @l = split(/\s+/, $$settings{classification});
	$$settings{classification} = [@l[$#l-5..$#l]]; # last 6 words
	unshift(@{$$settings{classification}}, join(" ", @l[0..$#l-6])); # all but last 6 words (species name - 1 or more words)

	my @ref_files = @{$$settings{Reference}} if defined $$settings{Reference};

	my @input_files = @ARGV;

	foreach my $file (@input_files, @ref_files) {
		$file = File::Spec->rel2abs($file);
		die("Input or reference file $file not found") unless -f $file;
	}

	$$settings{tempdir} ||= tempdir($$settings{tempdir} or File::Spec->tmpdir()."/$0.$$.XXXXX", CLEANUP => !($$settings{keep}));
  $$settings{tempdir} = File::Spec->rel2abs($$settings{tempdir});
	logmsg "Temporary directory is $$settings{tempdir}";

	my ($input_seqs, $ref_seqs) = loadInputs(\@input_files, \@ref_files);
	my $predictions = getGenePredictions(\@input_files, \@ref_files, $input_seqs, $ref_seqs, $settings);
	my $gb_filename = generateGenBankFile($input_seqs, $predictions, $settings);
	logmsg "Output is in $gb_filename";

  return 0;
}

# TODO put stop codons in all frames around each input seq
sub loadInputs($$) {
	my ($input_files, $ref_files) = @_;
	my ($input_seqs, $ref_seqs) = ({}, {});
	my $linker=$$settings{assembly_linker};
  foreach my $file (@$input_files) {
    my $contigSeqs=AKUtils::readMfa($file);
    $_=~s/^($linker)?|($linker)?$/$linker/g for(values(%$contigSeqs));
    #print Dumper $contigSeqs;die;
    #$_=$$settings{assembly_linker}.$_.$$settings{assembly_linker} for(values(%$contigSeqs));
		$input_seqs = {%$input_seqs, %$contigSeqs};
	}
	foreach my $file (@$ref_files) {
		$ref_seqs = {%$ref_seqs, %{AKUtils::readMfa($file)}};
	}
	return ($input_seqs, $ref_seqs);
}

sub getGenePredictions($$$$$) {
	my ($input_files, $ref_files, $input_seqs, $ref_seqs, $settings) = @_;

	$$settings{prediction_blast_db} = $$settings{blast_db} if defined $$settings{blast_db};
	if ($$settings{Reference}) {
		AKUtils::printSeqsToFile($ref_seqs, "$$settings{tempdir}/ref_seqs.mfa");
		$$settings{local_blast_db} = AKUtils::formatBLASTdb("$$settings{tempdir}/ref_seqs.mfa");
	}
	
	# FIXME
	die("multiple input files not supported") if @$input_files > 1;

	my (%all_predictions, %unified_predictions);
	my @minority_rep_orfs;

# FIXME: workaround for gibbs sampler bug - turn off RBS motif finding in GeneMark
$$settings{gm_trainer_xopts} .= " --motif=0";

#goto RNA;
	# Obtain ab initio predictions
	my $genemark_predictions;
	if ($$settings{prediction_use_genemark}) {
		$genemark_predictions = AKUtils::getGenemarkPredictions($input_seqs, $settings);
	}
	my $glimmer_predictions = AKUtils::getGlimmer3Predictions($input_seqs, $settings);
	my $blast_predictions = AKUtils::getBLASTGenePredictions($input_seqs, $settings);

  # TODO an extra blast here for IS elements and merge with $blast_predictions before making unified cds prediction. Database should be short terminal inverted repeat sequences
  # blastall -p blastn -W 7 -e 1e-5 -F F

	# Combine and index predictions by strand, stop
	foreach my $pred_set ($genemark_predictions, $glimmer_predictions, $blast_predictions) {
		next unless $pred_set;
		foreach my $seq (keys %$pred_set) {
			foreach my $pred (@{$$pred_set{$seq}}) {
				push(@{$all_predictions{$seq}->{$$pred{strand}}->{$$pred{stop}}}, $pred);
			}
		}
	}
	
	# Categorize and reconcile predictions
	foreach my $seq (sort AKUtils::alnum keys %all_predictions) {
		foreach my $strand (keys %{$all_predictions{$seq}}) {
			foreach my $stop (keys %{$all_predictions{$seq}->{$strand}}) {
				my $contrib_predictions = $all_predictions{$seq}->{$strand}->{$stop};
				if (scalar(@$contrib_predictions) < $$settings{min_predictors_to_call_orf}) {
					push(@minority_rep_orfs, @$contrib_predictions); next;
				}
				my %starts;

				foreach my $pred (@$contrib_predictions) {
					$starts{$$pred{predictor}} = $$pred{start};
				}
				my $best_start;
				if ($contrib_predictions->[0]->{strand} eq '+') {
					# Choose the least trivial (most downstream) predicted start.
					$best_start = max($starts{gmhmmp}, $starts{Glimmer3});

					if (defined $starts{BLAST} and $starts{BLAST} < $best_start) {
						# BLAST alignment extends upstream of the predicted start, so find the closest Met to the start predicted by BLAST.
						# warn "BLAST alignment upstream of predicted start (+)\n";
					}
				} else {
					$starts{gmhmmp} ||= 1e999; $starts{Glimmer3} ||= 1e999;
					$best_start = min($starts{gmhmmp}, $starts{Glimmer3});
#					die("Internal error") if $best_start == 1e999;
					if (defined $starts{BLAST} and $starts{BLAST} > $best_start) {
						# BLAST alignment extends upstream of the predicted start, so find the closest Met to the start predicted by BLAST.
						# warn "BLAST alignment upstream of predicted start (-)\n";
					}
#					$best_start = length($$input_seqs{$seq}) if $best_start > length($$input_seqs{$seq}) - 3; # FIXME: signal truncated predicts
				}
				my %prediction;
				foreach my $contrib_pred (@$contrib_predictions) {
					$prediction{$_} = $$contrib_pred{$_} for keys %$contrib_pred;
				}
				$prediction{start} = $best_start;
				($prediction{strand} eq '+' ? $prediction{lo} : $prediction{hi}) = $best_start;
				$prediction{predictor} = [];
				push(@{$prediction{predictor}}, $$_{predictor}) for @$contrib_predictions;
				
				$unified_predictions{$seq}->{$strand}->{$stop} = \%prediction;

				my $nt_seq = substr($$input_seqs{$seq}, min($best_start, $stop)-1, abs($best_start - $stop)+1);
				if ($contrib_predictions->[0]->{strand} eq '-') {
					$nt_seq = reverse($nt_seq); $nt_seq =~ tr/ATGC/TACG/;
				}
				my $aa_seq = AKUtils::dna2aa($nt_seq);

				# NB: longest known protein in e. coli is 1538 aa
        # TODO put these settings into conf file
        $$settings{prediction_minLength}||=30;
        $$settings{prediction_maxLength}||=2000;
				if (length($aa_seq) < $$settings{prediction_minLength} or length($aa_seq) > $$settings{prediction_maxLength} or $aa_seq !~ /M.+\*$/) {
					warn("WARNING: abnormal translated sequence (either too long, too short, or doesn't have a possible M start site): \n\t$nt_seq\n\t$aa_seq\n");
				}

			}
		}
	}

	if ($$settings{prediction_print_minority_reports}) {
		open(MR, '>', "$$settings{outfile}.minority_reports.log")
			or die("Unable to open file $$settings{outfile}.minority_reports.log for writing: $!");
		# print MR "Minority reports:\n";
		print MR "$$_{seqname}:$$_{start}..$$_{stop} ($$_{strand}) [L=".abs($$_{start}-$$_{stop})."] [P=$$_{predictor}]\n"
			for sort {$$a{seqname} cmp $$b{seqname}} @minority_rep_orfs;
		close MR;
	}

RNA:
	my $trna_predictions = AKUtils::gettRNAscanSEPredictions($input_seqs, $settings);
	foreach my $seqname (keys %$trna_predictions) {
		foreach my $pred (@{$$trna_predictions{$seqname}}) {
			$$pred{predictor} = ['tRNAscanSE'];
			$unified_predictions{$seqname}->{$$pred{strand}}->{$$pred{stop}} = $pred;
		}
	}

  my $rrna_predictions = getRRnaPredictions($input_files,$settings);
  foreach my $seqname (keys %$rrna_predictions){
    foreach my $pred (@{$$rrna_predictions{$seqname}}) {
      $unified_predictions{$seqname}->{$$pred{strand}}->{$$pred{stop}} = $pred;
    }
  }

  #logmsg scalar(keys(%unified_predictions))." predictions made."; #LK

	return \%unified_predictions;
}

sub generateGenBankFile($$$) {
	my ($seqs, $predictions, $settings) = @_;
	die("Internal error: no strain name supplied") unless defined $$settings{strain_name};
	die("Internal error: no classification supplied") unless defined $$settings{classification};
	die("Internal error: no output filename supplied") unless defined $$settings{outfile};

	$$settings{division} ||= 'BCT';

	my $gb_out_h = Bio::SeqIO->new(-file => '>'.$$settings{outfile}, -format => 'genbank');
	my $species_obj = Bio::Species->new(-classification => $$settings{classification},
		-sub_species => $$settings{strain_name},
	);

	$$settings{tag_prefix} ||= $$settings{strain_name}."_draft_";
	my $cds_tag_factory = CGPipeline::TagFactory->new({factory_type => "draft_orf_tagger",
		strain_name => $$settings{strain_name},
		tag_prefix => $$settings{tag_prefix}});
	my $trna_tag_factory = CGPipeline::TagFactory->new({factory_type => "draft_orf_tagger",
		strain_name => $$settings{strain_name},
		tag_prefix => $$settings{tag_prefix}.'t'});
	my $rrna_tag_factory = CGPipeline::TagFactory->new({factory_type => "draft_orf_tagger",
		strain_name => $$settings{strain_name},
		tag_prefix => $$settings{tag_prefix}.'r'});

	foreach my $seqname (sort keys %$seqs) {
		my $gb_seqname = $seqname; $gb_seqname =~ s/\s+/_/g;
		my $gbseq = Bio::Seq::RichSeq->new(-seq => $$seqs{$seqname},
			-id  => $gb_seqname,
			-desc => " $$settings{strain_name}, unfinished sequence, whole genome shotgun sequence",
			-keywords => ['WGS'],
			-species => $species_obj,
			-division => $$settings{division},
		);
		my @preds_for_seq;
		foreach my $strand (keys %{$$predictions{$seqname}}) {
			push(@preds_for_seq, values(%{$$predictions{$seqname}->{$strand}}));
		}

		foreach my $pred (sort {$$a{stop} <=> $$b{stop}} @preds_for_seq) {
			my $nt_seq = substr($$seqs{$seqname}, min($$pred{start}, $$pred{stop})-1, abs($$pred{start} - $$pred{stop})+1);
			if ($$pred{strand} eq '-') {
				$nt_seq = reverse($nt_seq); $nt_seq =~ tr/ATGC/TACG/;
			}

			my $pred_gene_feature = new Bio::SeqFeature::Generic(-primary_tag => 'gene',
				-start => $$pred{start},
				-end => $$pred{stop},
				-strand => ($$pred{strand} eq '+' ? 1 : -1),
#				-gene => ,
			);
			my $pred_feature = new Bio::SeqFeature::Generic(-primary_tag => $$pred{type},
				-start => $$pred{start},
				-end => $$pred{stop},
				-strand => ($$pred{strand} eq '+' ? 1 : -1),
#				-gene => ,
			);

			if ($$pred{type} eq 'CDS') {
				my $locus_tag = $cds_tag_factory->nextTag();
				$pred_gene_feature->add_tag_value('locus_tag', $locus_tag);
				$pred_feature->add_tag_value('locus_tag', $locus_tag);
				my $aa_seq = AKUtils::dna2aa($nt_seq);
				$pred_feature->add_tag_value('transl_table', $$settings{prediction_transl_table});
				$pred_feature->add_tag_value('translation', substr($aa_seq, 0, length($aa_seq)-1));
				$pred_feature->add_tag_value('evidence', 'predicted');
				$pred_feature->add_tag_value('note', 'Predictors: '.join(', ', @{$$pred{predictor}}));
			} elsif ($$pred{type} eq 'tRNA') {
				my $locus_tag = $trna_tag_factory->nextTag();
				$pred_gene_feature->add_tag_value('locus_tag', $locus_tag);
				$pred_feature->add_tag_value('locus_tag', $locus_tag);
				$pred_feature->add_tag_value('evidence', 'predicted');
				$pred_feature->add_tag_value('note', 'Predictors: '.join(', ', @{$$pred{predictor}}));
				$pred_feature->add_tag_value('product', 'tRNA-'.$$pred{trna_type});
				$pred_feature->add_tag_value('note', 'codon recognized: '.$$pred{trna_codon_recognized});
			} elsif ($$pred{type} eq 'rRNA') {
				my $locus_tag = $rrna_tag_factory->nextTag();
				$pred_gene_feature->add_tag_value('locus_tag', $locus_tag);
				$pred_feature->add_tag_value('locus_tag', $locus_tag);
				$pred_feature->add_tag_value('evidence', 'predicted');
				$pred_feature->add_tag_value('note', 'Predictors: '.join(', ', @{$$pred{predictor}}));
				$pred_feature->add_tag_value('product', $$pred{rrna_type});
				# TODO: Finish me
			} else { logmsg "Internal error"; die "Internal error: cannot determine feature type" }

			$gbseq->add_SeqFeature($pred_gene_feature);
			$gbseq->add_SeqFeature($pred_feature);
		}
		$gb_out_h->write_seq($gbseq);
	}
	
	return $$settings{outfile};
}


############
# rRNA prediction subroutines
# ##########
sub getRRnaPredictions($$){
  my($input_files,$settings)=@_;
  my($predictions);

  $predictions=rnammer($input_files,$settings);
  
  # bring together all rRNA predictions here
  # TODO reconcile different predictors
  foreach my $seqname (keys %$predictions) {
    foreach my $pred (@{$$predictions{$seqname}}) {
      $$pred{predictor}=[$$pred{source}];
      #$$pred{predictor} = ['tRNAscanSE'];
    }
  }
  return $predictions;
}

sub rnammer($$){
  # usage(): rnammer -S arc/bac/euk (-multi) (-m tsu,lsu,ssu) (-f) (-k) (-gff [gff file]) (-xml [xml file]) (-f [fasta file]) (-h [HMM report]) [sequence]
  my($input_files,$settings)=@_;
  my($predictions,$domain)=({},"bac");
  $domain='bac'; # TODO from $settings, gather which it should be: arc/bac/euk
  $$settings{rnammer_exec} ||= AKUtils::fullPathToExec('rnammer');
  die("RNAmmer executable not found") unless -x $$settings{rnammer_exec};

  foreach my $i (@$input_files){
    my $command="$$settings{rnammer_exec} -S $domain -multi -m tsu,lsu,ssu -gff $$settings{tempdir}/rnammer.gff -xml $$settings{tempdir}/rnammer.xml -f $$settings{tempdir}/rnammer.ffn < $i";
    logmsg "Running RNAmmer.\nCOMMAND\n  $command";
    system($command);
  }
  logmsg "RNAmmer output files are in $$settings{tempdir}\n";
  $predictions=loadRnammerPredictions("$$settings{tempdir}/rnammer.gff",$settings);
  return $predictions;
}

sub loadRnammerPredictions($$){
  my($input_file,$settings)=@_;
  my($gffVersion,%predictions);

  # version 2
  open(RNAGFF,$input_file) or die("Cannot open RNAmmer output file $input_file because $!\n");
  while(<RNAGFF>){
    chomp;
    # comments
    if(/^\s*#/){
      # directives
      if(/^\s*##/){
        if(/gff-version(\d+)/){
          $gffVersion=$1;
        }
      }
      next;
    }
    my($rrna_type);
    my($seqname,$source,$feature,$start,$stop,$score,$strand,$frame,$attribute)=split /\t/;
    if($attribute=~/(\d+[sS])/){
      $rrna_type=uc($1);
    }
    push(@{$predictions{$seqname}}, {type=>'rRNA',seqname=>$seqname, source=>$source,
      lo=>min($start,$stop), hi=>max($start,$stop), start=>$start, stop=>$stop,
      strand=>$strand, score=>$score, frame=>$frame, attribute=>$attribute,
      rrna_type=>$rrna_type
    });
  }
  close RNAGFF;
  return \%predictions;
}
