#!/usr/bin/env perl

# run_annotation: Perform standard annotation protocol operations
# Author: Andrey Kislyuk (kislyuk@gatech.edu)

package PipelineRunner;
my ($VERSION) = ('$Id: $' =~ /,v\s+(\d+\S+)/o);

my $settings = {
  appname => 'cgpipeline',
};
my $stats;

use strict;
use FindBin;
use lib "$FindBin::RealBin/../lib";
$ENV{PATH} = "$FindBin::RealBin:".$ENV{PATH};

use Getopt::Long;
use File::Temp ('tempdir');
use File::Path;
use File::Spec;
use File::Copy;
use File::Basename;
use List::Util qw(min max sum shuffle);
use Bio::Seq;
use Bio::SeqIO;
use Bio::SeqFeature::Gene::GeneStructure;
use Bio::SeqFeature::Generic;
use Bio::Species;
use Bio::Annotation::SimpleValue;
use AKUtils;
use Data::Dumper;

# keep track of which steps are performed
my @annotationSteps=qw(ABX IS SIGNALP TMHMM PDB VFDB COGS UNIPROT INTERPRO);
$0 = fileparse($0);
local $SIG{'__DIE__'} = sub { my $e = $_[0]; $e =~ s/(at [^\s]+? line \d+\.$)/\nStopped $1/; die("$0: ".(caller(1))[3].": ".$e); };
sub logmsg {my $FH = $PipelineRunner::LOG || *STDOUT; print $FH "$0: ".(caller(1))[3].": @_\n";}

exit(main());

sub main() {
  $settings = AKUtils::loadConfig($settings);
  die usage($settings) if @ARGV < 1;

  $$settings{uniprot_db3} = $$settings{annotation_uniprot_db3};
  $$settings{uniprot_evidence_db3} = $$settings{annotation_uniprot_evidence_db3};
  $$settings{blast_db} = $$settings{annotation_blast_db};

  my @cmd_options = qw(ChangeDir=s keep blast_db=s outdir=s tempdir=s uniprot_db3=s uniprot_evidence_db3=s reporting_email=s goto=s just=s help no-db-check skip=s@ name=s numcpus=i);
  GetOptions($settings, @cmd_options) or die;
  die usage($settings) if $$settings{help};
  $$settings{numcpus}||=1;
  die("Option blast_db is required") unless $$settings{blast_db}; # TODO: more error checks
  die("Option uniprot_db3 is required") unless $$settings{uniprot_db3}; # TODO: more error checks
  die("Option uniprot_evidence_db3 is required") unless $$settings{uniprot_evidence_db3}; # TODO: more error checks
  die("Option reporting_email is required") unless $$settings{reporting_email}; # TODO: more error checks
  my %skip;
  $skip{$_}=1 for(@{$$settings{skip}});
  my $input_gbk = $ARGV[0];

  $$settings{tempdir} ||= tempdir(File::Spec->tmpdir()."/$0.$$.XXXXX", CLEANUP => !($$settings{keep}));
  $$settings{outdir} ||= $input_gbk."_annotation_sql";
  unless (-d $$settings{outdir}) {
    mkdir($$settings{outdir}) or die("Unable to create output directory $$settings{outdir}: $!");
  }
  
  logmsg "Temporary directory is $$settings{tempdir}";
  logmsg "Output directory is $$settings{outdir}";

  my $genes = AKUtils::loadCDSFromGenbankFile($input_gbk);

  my $aa_file = "$$settings{tempdir}/aa.fasta";
  my $fasta_h = Bio::SeqIO->new(-file => '>'.$aa_file, -format => 'Fasta');
  # die("Multiple organisms in GenBank input") if keys(%$genes) > 1; -- need better sanity checks
  my @genes=(); # array of genes to be sorted
  foreach my $org (keys %$genes) {
    push(@genes,values(%{$$genes{$org}}));
  }
  my @sortedGenes=sort {
    my($idA,$idB)=(($a->get_tag_values('locus_tag'))[0],($b->get_tag_values('locus_tag'))[0]);
    $idA=~s/.+_0*(\d+)$/$1/;
    $idB=~s/.+_0*(\d+)$/$1/;
    $idA <=> $idB;
  } @genes;
  foreach my $gene (@sortedGenes){
    $fasta_h->write_seq(Bio::Seq->new(-seq => $gene->seq->translate()->seq(),
                        -display_id => ($gene->get_tag_values('locus_tag'))[0]));
  }

  # skip to any particular part of annotation
  my $goto=$$settings{goto} || $$settings{just};
  if($goto){
    if(my $step=(grep(/$goto/i,@annotationSteps))[0]){
      logmsg "Going straight to $step";
      goto $step;
    } else{
      warn "Warning: Argument goto was given as $goto but it is not one of the accepted arguments. $0 --help for more info. Not skipping any annotation steps";
      sleep 2; # in case ctrl-c needs to be hurried
    }
  }

  ## check pipeline requirements, but not if skipping ahead with goto
  # TODO Verify presence of pipeline requirements (SignalP, TMHMM, Uniprot, Uniprot DB3, ...)
  # Error checking with blast databases
  if(!$$settings{'no-db-check'}){
    my $blastErrMsgF ="ERROR: Need \%s in conf file set to a database. Current value is \%s.";
    my $blastErrMsgF2="ERROR: Could not detect a protein blast database at \%s.";
    for my $db(qw(card_blast_db is_blast_db pdb_blast_db vfdb_blast_db cogs_blast_db blast_db)){
      my $dbPath=$$settings{$db};
      die sprintf($blastErrMsgF,$db,$dbPath) if(!$dbPath);
      die sprintf($blastErrMsgF2,$dbPath) if(!-e "$dbPath.pin" && !-e "$dbPath.pal");
    }
  }
  
  #########################################
  ## Begin annotation with all modules here

  # Antibiotic resistance genes
  ABX:
  if(!$skip{ABX}){
    my $abx_command="run_annotation_blast.pl $aa_file -d $$settings{card_blast_db} -o $aa_file.argannot_hits.sql -p '-F F -e 1e-10 -b 1 -v 1' -tempdir='$$settings{tempdir}' --min_aa_coverage 60 --min_aa_identity 90 --numcpus $$settings{numcpus} 2>&1";
    logmsg "Finding antimicrobial resistance genes with command\n  $abx_command";
    system($abx_command); die "Problem with antimicrobial resistance gene blasting" if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  # IS elements
  # Credit to some parameters goes to ISsaga http://genomebiology.com/2011/12/3/R30
  IS:
  if(!$skip{IS}){
    my $is_command="run_annotation_blast.pl $aa_file -d $$settings{is_blast_db} -o $aa_file.is_hits.sql --min_aa_coverage 30 --min_aa_identity 20 --min_aa_similarity 30 -p '-W 2 -F F -e 1E-5 -b 1 -v 1' -tempdir='$$settings{tempdir}' --numcpus $$settings{numcpus} 2>&1";
    logmsg "Finding IS elements with command\n  $is_command";
    system($is_command); 
    warn "Problem with IS element blasting. Could be that you do not have an IS element database, which was removed from CGP due to a takedown notice." if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  SIGNALP:
  if(!$skip{SIGNALP}){
    # Run SignalP on all proteins
    system("run_annotation_signalp.pl $aa_file"); die if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  # Run TMHMM on all proteins
  TMHMM:
  if(!$skip{TMHMM}){
    system("run_annotation_tmhmm.pl $aa_file"); die if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  # run against PDB
  PDB:
  if(!$skip{PDB}){
    logmsg "Checking for proteins with structural similarities in the Protein Databank";
    system("run_annotation_blast.pl $aa_file -d $$settings{pdb_blast_db} -o $aa_file.pdb_hits.sql --min_aa_coverage 40 --min_aa_identity 40 --min_aa_similarity 40 -p '-b 10 -v 10' -tempdir='$$settings{tempdir}' --numcpus $$settings{numcpus} 2>&1"); 
    warn "Problem with Protein Databank blasting" if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  # Check all proteins against VFDB
  VFDB:
  if(!$skip{VFDB}){
    logmsg "Finding virulence factors";
    system("run_annotation_blast.pl $aa_file -d $$settings{vfdb_blast_db} -o $aa_file.vfdb_hits.sql --min_aa_coverage 40 --min_aa_identity 40 --min_aa_similarity 40 -p '-b 1 -v 1' -tempdir='$$settings{tempdir}' --numcpus $$settings{numcpus} 2>&1"); 
    warn "Problem with vfdb" if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  # Check all proteins against COGs 
  COGS:
  if(!$skip{COGS}){
    logmsg "Finding COGs";
    system("run_annotation_blast.pl $aa_file -d $$settings{cogs_blast_db} -o $aa_file.cogs_hits.sql --min_aa_coverage 80 --min_aa_identity 40 --min_aa_similarity 70 -p '-b 10 -v 10' -tempdir='$$settings{tempdir}' --numcpus $$settings{numcpus} 2>&1 "); 
    warn "Problem with blast against COGs" if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  # Run BLAST on all proteins vs. Uniprot
  UNIPROT:
  if(!$skip{UNIPROT}){
    logmsg "BLASTp vs Uniprot (this might take a while)";
    my $invoke_string = "run_annotation_blast.pl $aa_file -db=$$settings{blast_db} --numcpus $$settings{numcpus}";
    $invoke_string .= " -outfile='$$settings{tempdir}/blast.sql'";
    $invoke_string .= " -keep" if $$settings{keep};
    $invoke_string .= " -tempdir='$$settings{tempdir}'";
    $invoke_string .= " --min_aa_coverage 70 --min_aa_identity 50 -p '-b 15 -v 15'";
    $invoke_string .= " --checkEvery 300"; # check progress every 5 minutes
    logmsg "COMMAND\n  $invoke_string";
    system($invoke_string) if(!-e "$$settings{outdir}/blast.sql"); die "Problem with BLAST vs Uniprot" if $?;
    flushSql($settings);

    # Fetch Uniprot metadata for BLAST hits
    $invoke_string = "run_annotation_uniprot2sql.pl '$$settings{outdir}/blast.sql'";
    $invoke_string .= " -uniprot_db3='$$settings{uniprot_db3}'";
    $invoke_string .= " -uniprot_evidence_db3='$$settings{uniprot_evidence_db3}'";
    $invoke_string .= " -uniprot_sql_outfile='$$settings{tempdir}/uniprot.sql'";
    $invoke_string .= " -uniprot_evidence_sql_outfile='$$settings{tempdir}/uniprot_evidence.sql'";
    logmsg "Parsing the uniprot result with\n    $invoke_string";
    system($invoke_string); die if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }

  INTERPRO:
  if(!$skip{INTERPRO}){
    # Run InterProScan on all proteins
    my $invoke_string = "run_annotation_interpro.pl $aa_file";
    system($invoke_string); die if $?;
    flushSql($settings);
    goto DONE if($$settings{just});
  }
  DONE:
  logmsg "Annotation complete! SQL results are in $$settings{outdir}";
  #                                       #
  # done with individual annotation steps #
  #########################################

  # This is the step where we wrap everything up.
  # Put all available annotations into a genbank file, 
  # and then put simple annotations into another genbank file.
  my $organismid=$$settings{name} || "unknown"; # this is used unless there is an organismid already in prediction.gb
  system("run_annotation_genbank.pl --inputdir=$$settings{outdir} --prediction=$input_gbk --gb=$$settings{outdir}/annotation_withdomains.gb --gff=$$settings{outdir}/annotation_withdomains.gff --organism=$organismid --subdomains");
  die if $?;
  system("run_annotation_genbank.pl --inputdir=$$settings{outdir} --prediction=$input_gbk --gb=$$settings{outdir}/annotation.gb --gff=$$settings{outdir}/annotation.gff --organism=$organismid");
  die if $?;
  logmsg "Conversion complete! Genbank file is in $$settings{outdir}/annotation.gb and related files are in the same directory";
  
  return 0;
}

sub flushSql{
  my($settings)=@_;
  foreach my $file (glob "$$settings{tempdir}/*.sql") {
    move($file, $$settings{outdir});
  }
  logmsg "SQL files have been moved to $$settings{outdir}";
  return 1;
}

sub usage{
  my($settings)=@_;
  my $usage="Usage: $0 input.gb -o annotationDir
  annotationDir can be converted to a genbank file with run_annotation_genbank.pl
    -h for more help";
  return $usage if(!$$settings{help});
  $usage.="
  --name=something to name your organism in the genbank file. If a name is in the prediction.gb file, then that name will be used instead.
  --nodb-check do not check for blast databases before annotation.
    this is implied with --goto and --just
  The steps of annotation are, in order: ABX IS SIGNALP TMHMM PDB VFDB COGS UNIPROT INTERPRO
  --skip=STEP skip this step
  --just=STEP only run this step
  --goto=STEP Skips steps until this annotation step is reached.
  --numcpus 1 The number of processors to use
  ";
  return $usage;
}

